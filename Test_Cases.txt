TEST ALL IF_QC STATEMENTS

fn main() {
    a: q3 = 0;
    if ctrl (a[2]) {H(a[0])};
    if ctrl (a[2] and a[1]){X(a[0])};
    if ctrl (a[2] or a[1]){X(a[0])};
    if ctrl (a[2] nand a[1]){X(a[0])};
    if ctrl (a[2] nor a[1]){X(a[0])};
    if ctrl (a[2] xor a[1]){X(a[0])};
    if ctrl (a[2] xnor a[1]){X(a[0])};
    a
}
TEST Persist-kill mechanism

fn main() {
    a: q2 = 1;
    b: q2 = 1;
    c = b + a;
    a + c
}

TEST bitwise modification

fn main() {
    a: q3 = 0;
    a[0] = H(a[0]);
    b: q1 = 1;
    a[1] = X(b);
    a
}

TEST Persist-kill mechanism with bitwise

fn main() {
    a: q3 = 0;
    a[0] = H(a[0]);
    b: q1 = 1;
    a[1] = X(b);
    a
}

fn main() {
    a: q3 = 0;
    a[0] = H(a[0]);
    b: q1 = 1;
    a[1] = X(b);
    b
}

fn main() {
    a: q3 = 0;
    a[0] = H(a[0]);
    b: q4 = 1;
    a = X(a+b);
    a
}

fn main() {
    a: q3 = 0;
    a[0] = H(a[0]);
    b: q4 = 1;
    a = X(a+b);
    b
}

fn main() {
    a: q3 = 0;
    a[1] = H(a[0]);
    b: q4 = 1;
    a = X(a+b);
    a
}


TEST IF MULTIPLEX with persist kill and reset
fn main() {
    a: q1 = 1;
    b: q1 = 1;
    a = if (b) {H(a)} else {X(a)};
    a
}

fn main() {
    a: q1 = 1;
    b: q1 = 1;
    a = if (b) {H(a)} else {X(a)};
    b
}

fn main() {
    a: q1 = 1;
    b: q1 = 0;
    a = if (b) {H(a)};
    a
}

fn main() {
    a: q2 = 1;
    b: q1 = 0;
    a = if (b) {H(a)};
    a
}
fn main() {
    a: q2 = 1;
    b: q1 = 0;
    a[0] = if (b) {H(a[0])};
    a
}


FUNCTION CALL
fn main() {
    a: q2 = 1;
    b: q1 = 0;
    c = add(a,b);
    c
}
fn add(a:qN,b:qN)
{
    3
}
fn add(persist a:qN,b:qN)
{
    1
}
fn add(a:qN,persist b:qN)
{
    2
}
fn add(persist a:qN,persist b:qN)
{
    0
}


CLASSICAL BIT
fn main() {
    a: c = 32;
    b: c = 25;
    c: qN = a - b - 5;
    c
}

Length of Q-Variable
fn main() {
    a: qN = 32;
    b: c = |a|;
    c: qN = b;
    c
}
fn main() {
    a: qN = 31;
    b: c = |a+5|;
    c: qN = b;
    c
}

IMPORT
use abc ;
use def ;
fn main() {
    a: qN = 0;
    b: qN = 1;
    def.sub(abc.add(a,b),abc.add(b,a))
}

abc.txt
use def ;
fn add(lhs: qN, rhs: qN) {
    (lhs + rhs)
}

def.txt
use abc ;
fn sub(lhs: qN, rhs: qN) {
    (lhs - rhs)
}


FOR Classical

fn main() {
    a: qN = 0;
    for b in [0 : 5 : 1]
    {
    a = X(a);
    };
    a
}


FOR Control

fn main() {
    a: qN = 3;
    b: qN = 5;
    for b times do {X(a)};
    a
}


IF classical