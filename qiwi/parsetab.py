
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programASSIGN COLON COMMA CST_INT EOS ID KEY_ELSE KEY_FN KEY_IF LBRACE LBRACK LPAREN OP_ADD OP_DIV OP_MUL OP_SUB RBRACE RBRACK RPAREN TYPE_QINTprogram :program : funcdef programfuncdef : KEY_FN ID LPAREN argsdecl RPAREN type LBRACE statements RBRACEfuncdef : KEY_FN ID LPAREN argsdecl RPAREN LBRACE statements RBRACEargsdecl :argsdecl : argdeclargsdecl : argdecl COMMA argsdeclargdecl : ID COLON IDstatements : expressionstatements : statement EOS statementsstatement : assignmentassignment : ID ASSIGN expressionassignment : ID COLON ID ASSIGN expressionexpression : LPAREN expression OP_ADD expression RPAREN\n                  | LPAREN expression OP_SUB expression RPAREN\n                  | LPAREN expression OP_MUL expression RPAREN\n                  | LPAREN expression OP_DIV expression RPARENexpression : CST_INTexpression : IDexpression : ID LBRACK CST_INT RBRACKexpression : ID LPAREN args RPARENargs :args : argargs : arg COMMA argsarg : expressiontype : TYPE_QINT LBRACK CST_INT RBRACK'
    
_lr_action_items = {'$end':([0,1,2,4,34,37,],[-1,0,-1,-2,-4,-3,]),'KEY_FN':([0,2,34,37,],[3,3,-4,-3,]),'ID':([3,6,10,12,15,18,20,29,30,31,35,44,45,46,47,52,53,],[5,7,13,7,19,19,33,33,33,43,19,33,33,33,33,33,33,]),'LPAREN':([5,15,18,19,20,29,30,33,35,44,45,46,47,52,53,],[6,20,20,29,20,20,20,29,20,20,20,20,20,20,20,]),'RPAREN':([6,8,9,12,13,17,24,29,33,39,40,41,50,51,52,54,55,56,57,58,60,61,62,63,],[-5,11,-6,-5,-8,-7,-18,-22,-19,51,-23,-25,-20,-21,-22,60,61,62,63,-24,-14,-15,-16,-17,]),'COLON':([7,19,],[10,31,]),'COMMA':([9,13,24,33,40,41,50,51,60,61,62,63,],[12,-8,-18,-19,52,-25,-20,-21,-14,-15,-16,-17,]),'LBRACE':([11,14,49,],[15,18,-26,]),'TYPE_QINT':([11,],[16,]),'CST_INT':([15,18,20,26,28,29,30,35,44,45,46,47,52,53,],[24,24,24,36,38,24,24,24,24,24,24,24,24,24,]),'LBRACK':([16,19,33,],[26,28,28,]),'RBRACE':([19,21,22,24,27,48,50,51,60,61,62,63,],[-19,34,-9,-18,37,-10,-20,-21,-14,-15,-16,-17,]),'ASSIGN':([19,43,],[30,53,]),'EOS':([23,24,25,33,42,50,51,59,60,61,62,63,],[35,-18,-11,-19,-12,-20,-21,-13,-14,-15,-16,-17,]),'OP_ADD':([24,32,33,50,51,60,61,62,63,],[-18,44,-19,-20,-21,-14,-15,-16,-17,]),'OP_SUB':([24,32,33,50,51,60,61,62,63,],[-18,45,-19,-20,-21,-14,-15,-16,-17,]),'OP_MUL':([24,32,33,50,51,60,61,62,63,],[-18,46,-19,-20,-21,-14,-15,-16,-17,]),'OP_DIV':([24,32,33,50,51,60,61,62,63,],[-18,47,-19,-20,-21,-14,-15,-16,-17,]),'RBRACK':([36,38,],[49,50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,4,]),'funcdef':([0,2,],[2,2,]),'argsdecl':([6,12,],[8,17,]),'argdecl':([6,12,],[9,9,]),'type':([11,],[14,]),'statements':([15,18,35,],[21,27,48,]),'expression':([15,18,20,29,30,35,44,45,46,47,52,53,],[22,22,32,41,42,22,54,55,56,57,41,59,]),'statement':([15,18,35,],[23,23,23,]),'assignment':([15,18,35,],[25,25,25,]),'args':([29,52,],[39,58,]),'arg':([29,52,],[40,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> <empty>','program',0,'p_program_blank','qiwiparser.py',8),
  ('program -> funcdef program','program',2,'p_program_functions','qiwiparser.py',12),
  ('funcdef -> KEY_FN ID LPAREN argsdecl RPAREN type LBRACE statements RBRACE','funcdef',9,'p_funcdef','qiwiparser.py',16),
  ('funcdef -> KEY_FN ID LPAREN argsdecl RPAREN LBRACE statements RBRACE','funcdef',8,'p_funcdef_void','qiwiparser.py',20),
  ('argsdecl -> <empty>','argsdecl',0,'p_argsdecl_null','qiwiparser.py',24),
  ('argsdecl -> argdecl','argsdecl',1,'p_argsdecl_argdecl','qiwiparser.py',28),
  ('argsdecl -> argdecl COMMA argsdecl','argsdecl',3,'p_argsdecl_argdecls','qiwiparser.py',32),
  ('argdecl -> ID COLON ID','argdecl',3,'p_argdecl','qiwiparser.py',36),
  ('statements -> expression','statements',1,'p_statements_expression','qiwiparser.py',44),
  ('statements -> statement EOS statements','statements',3,'p_statements_statements','qiwiparser.py',48),
  ('statement -> assignment','statement',1,'p_statement','qiwiparser.py',52),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','qiwiparser.py',56),
  ('assignment -> ID COLON ID ASSIGN expression','assignment',5,'p_assignment_typed','qiwiparser.py',60),
  ('expression -> LPAREN expression OP_ADD expression RPAREN','expression',5,'p_expression_arithmatic','qiwiparser.py',68),
  ('expression -> LPAREN expression OP_SUB expression RPAREN','expression',5,'p_expression_arithmatic','qiwiparser.py',69),
  ('expression -> LPAREN expression OP_MUL expression RPAREN','expression',5,'p_expression_arithmatic','qiwiparser.py',70),
  ('expression -> LPAREN expression OP_DIV expression RPAREN','expression',5,'p_expression_arithmatic','qiwiparser.py',71),
  ('expression -> CST_INT','expression',1,'p_expression_number','qiwiparser.py',75),
  ('expression -> ID','expression',1,'p_expression_id','qiwiparser.py',79),
  ('expression -> ID LBRACK CST_INT RBRACK','expression',4,'p_expression_indexedid','qiwiparser.py',83),
  ('expression -> ID LPAREN args RPAREN','expression',4,'p_expression_call','qiwiparser.py',87),
  ('args -> <empty>','args',0,'p_args_null','qiwiparser.py',91),
  ('args -> arg','args',1,'p_args_arg','qiwiparser.py',95),
  ('args -> arg COMMA args','args',3,'p_args_args','qiwiparser.py',99),
  ('arg -> expression','arg',1,'p_arg','qiwiparser.py',103),
  ('type -> TYPE_QINT LBRACK CST_INT RBRACK','type',4,'p_type_len','qiwiparser.py',111),
]
