
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programASSIGN COLON COMMA CST_INT EOS ID KEY_ELSE KEY_FN KEY_IF KEY_USE LBRACE LBRACK LPAREN OP_ADD OP_DIV OP_MUL OP_SUB RBRACE RBRACK RPAREN TYPE_QINTprogram : imports fnprogramimports : import importsimports : import : KEY_USE ID EOSfnprogram :fnprogram : funcdef fnprogramfuncdef : KEY_FN ID LPAREN argsdecl RPAREN type LBRACE statements RBRACEfuncdef : KEY_FN ID LPAREN argsdecl RPAREN LBRACE statements RBRACEargsdecl :argsdecl : argdeclargsdecl : argdecl COMMA argsdeclargdecl : ID COLON IDstatements : expressionstatements : statement EOS statementsstatement : assignmentassignment : ID ASSIGN expressionassignment : ID COLON ID ASSIGN expressionexpression : LPAREN expression OP_ADD expression RPAREN\n                  | LPAREN expression OP_SUB expression RPAREN\n                  | LPAREN expression OP_MUL expression RPAREN\n                  | LPAREN expression OP_DIV expression RPARENexpression : CST_INTexpression : IDexpression : ID LBRACK CST_INT RBRACKexpression : ID LPAREN args RPARENexpression : ID COLON ID LPAREN args RPARENargs :args : argargs : arg COMMA argsarg : expressiontype : TYPE_QINT LBRACK CST_INT RBRACK'
    
_lr_action_items = {'KEY_FN':([0,2,3,6,8,12,41,44,],[-3,7,-3,7,-2,-4,-8,-7,]),'$end':([0,1,2,3,5,6,8,10,12,41,44,],[-3,0,-5,-3,-1,-5,-2,-6,-4,-8,-7,]),'KEY_USE':([0,3,12,],[4,4,-4,]),'ID':([4,7,13,17,19,22,25,27,36,37,38,42,51,52,53,54,55,60,61,62,],[9,11,14,20,14,26,26,40,40,49,40,26,40,40,40,40,67,40,40,40,]),'EOS':([9,30,31,32,40,50,58,59,70,71,72,73,74,75,],[12,42,-22,-15,-23,-16,-24,-25,-17,-18,-19,-20,-21,-26,]),'LPAREN':([11,22,25,26,27,36,38,40,42,49,51,52,53,54,60,61,62,67,],[13,27,27,36,27,27,27,36,27,61,27,27,27,27,27,27,27,61,]),'RPAREN':([13,15,16,19,20,24,31,36,40,46,47,48,58,59,60,61,63,64,65,66,68,69,71,72,73,74,75,],[-9,18,-10,-9,-12,-11,-22,-27,-23,59,-28,-30,-24,-25,-27,-27,71,72,73,74,-29,75,-18,-19,-20,-21,-26,]),'COLON':([14,26,40,],[17,37,55,]),'COMMA':([16,20,31,40,47,48,58,59,71,72,73,74,75,],[19,-12,-22,-23,60,-30,-24,-25,-18,-19,-20,-21,-26,]),'LBRACE':([18,21,57,],[22,25,-31,]),'TYPE_QINT':([18,],[23,]),'CST_INT':([22,25,27,33,35,36,38,42,51,52,53,54,60,61,62,],[31,31,31,43,45,31,31,31,31,31,31,31,31,31,31,]),'LBRACK':([23,26,40,],[33,35,35,]),'RBRACE':([26,28,29,31,34,56,58,59,71,72,73,74,75,],[-23,41,-13,-22,44,-14,-24,-25,-18,-19,-20,-21,-26,]),'ASSIGN':([26,49,],[38,62,]),'OP_ADD':([31,39,40,58,59,71,72,73,74,75,],[-22,51,-23,-24,-25,-18,-19,-20,-21,-26,]),'OP_SUB':([31,39,40,58,59,71,72,73,74,75,],[-22,52,-23,-24,-25,-18,-19,-20,-21,-26,]),'OP_MUL':([31,39,40,58,59,71,72,73,74,75,],[-22,53,-23,-24,-25,-18,-19,-20,-21,-26,]),'OP_DIV':([31,39,40,58,59,71,72,73,74,75,],[-22,54,-23,-24,-25,-18,-19,-20,-21,-26,]),'RBRACK':([43,45,],[57,58,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'imports':([0,3,],[2,8,]),'import':([0,3,],[3,3,]),'fnprogram':([2,6,],[5,10,]),'funcdef':([2,6,],[6,6,]),'argsdecl':([13,19,],[15,24,]),'argdecl':([13,19,],[16,16,]),'type':([18,],[21,]),'statements':([22,25,42,],[28,34,56,]),'expression':([22,25,27,36,38,42,51,52,53,54,60,61,62,],[29,29,39,48,50,29,63,64,65,66,48,48,70,]),'statement':([22,25,42,],[30,30,30,]),'assignment':([22,25,42,],[32,32,32,]),'args':([36,60,61,],[46,68,69,]),'arg':([36,60,61,],[47,47,47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> imports fnprogram','program',2,'p_program_import_fnprogram','qiwiparser.py',8),
  ('imports -> import imports','imports',2,'p_imports_import_imports','qiwiparser.py',14),
  ('imports -> <empty>','imports',0,'p_imports_blank','qiwiparser.py',18),
  ('import -> KEY_USE ID EOS','import',3,'p_import_use','qiwiparser.py',22),
  ('fnprogram -> <empty>','fnprogram',0,'p_fnprogram_blank','qiwiparser.py',26),
  ('fnprogram -> funcdef fnprogram','fnprogram',2,'p_fnprogram_functions','qiwiparser.py',30),
  ('funcdef -> KEY_FN ID LPAREN argsdecl RPAREN type LBRACE statements RBRACE','funcdef',9,'p_funcdef','qiwiparser.py',34),
  ('funcdef -> KEY_FN ID LPAREN argsdecl RPAREN LBRACE statements RBRACE','funcdef',8,'p_funcdef_void','qiwiparser.py',38),
  ('argsdecl -> <empty>','argsdecl',0,'p_argsdecl_null','qiwiparser.py',42),
  ('argsdecl -> argdecl','argsdecl',1,'p_argsdecl_argdecl','qiwiparser.py',46),
  ('argsdecl -> argdecl COMMA argsdecl','argsdecl',3,'p_argsdecl_argdecls','qiwiparser.py',50),
  ('argdecl -> ID COLON ID','argdecl',3,'p_argdecl','qiwiparser.py',54),
  ('statements -> expression','statements',1,'p_statements_expression','qiwiparser.py',65),
  ('statements -> statement EOS statements','statements',3,'p_statements_statements','qiwiparser.py',69),
  ('statement -> assignment','statement',1,'p_statement','qiwiparser.py',73),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','qiwiparser.py',77),
  ('assignment -> ID COLON ID ASSIGN expression','assignment',5,'p_assignment_typed','qiwiparser.py',81),
  ('expression -> LPAREN expression OP_ADD expression RPAREN','expression',5,'p_expression_arithmatic','qiwiparser.py',89),
  ('expression -> LPAREN expression OP_SUB expression RPAREN','expression',5,'p_expression_arithmatic','qiwiparser.py',90),
  ('expression -> LPAREN expression OP_MUL expression RPAREN','expression',5,'p_expression_arithmatic','qiwiparser.py',91),
  ('expression -> LPAREN expression OP_DIV expression RPAREN','expression',5,'p_expression_arithmatic','qiwiparser.py',92),
  ('expression -> CST_INT','expression',1,'p_expression_number','qiwiparser.py',96),
  ('expression -> ID','expression',1,'p_expression_id','qiwiparser.py',100),
  ('expression -> ID LBRACK CST_INT RBRACK','expression',4,'p_expression_indexedid','qiwiparser.py',104),
  ('expression -> ID LPAREN args RPAREN','expression',4,'p_expression_call','qiwiparser.py',108),
  ('expression -> ID COLON ID LPAREN args RPAREN','expression',6,'p_expression_import_call','qiwiparser.py',112),
  ('args -> <empty>','args',0,'p_args_null','qiwiparser.py',116),
  ('args -> arg','args',1,'p_args_arg','qiwiparser.py',120),
  ('args -> arg COMMA args','args',3,'p_args_args','qiwiparser.py',124),
  ('arg -> expression','arg',1,'p_arg','qiwiparser.py',128),
  ('type -> TYPE_QINT LBRACK CST_INT RBRACK','type',4,'p_type_len','qiwiparser.py',136),
]
